üîπ S ‚Äî Single Responsibility Principle (SRP)
A class should have only one responsibility or reason to change.
If a class is handling more than one functionality (e.g., data management and logging), it becomes hard to modify, test, and reuse.
Breaking such a class into focused ones ensures clean separation of concerns.
This leads to easier maintainability and better cohesion.
Always ask: ‚ÄúDoes this class do more than one job?‚Äù
Solution: Extract responsibilities into separate classes or modules.

Eg : Each class has one clear responsibility.
class InvoicePrinter {
    void print(Invoice invoice) { /* printing logic */ }
}

class InvoiceSaver {
    void saveToFile(Invoice invoice) { /* saving logic */ }
}


üîπ O ‚Äî Open/Closed Principle (OCP)
Classes should be open for extension, but closed for modification.
You should be able to add new behavior without touching existing code.
This is often achieved using interfaces and polymorphism.
Avoid if-else or switch-case blocks that grow with each new requirement.
Instead, define new classes that implement or extend an abstraction.
Benefit: Existing code remains stable and untouched during changes.

Eg: You can add new Payment types without changing existing logic.

interface Payment {
    void pay();
}

class CardPayment implements Payment {
    public void pay() { System.out.println("Card"); }
}

class UpiPayment implements Payment {
    public void pay() { System.out.println("UPI"); }
}


üîπ L ‚Äî Liskov Substitution Principle (LSP)
Subtypes must be substitutable for their base types without affecting correctness.
If a subclass cannot behave like its parent class, it's violating LSP.
E.g., if calling a method on a subclass throws unexpected exceptions or changes behavior, it‚Äôs problematic.
Inheritance should not break expectations; derived classes must honor the contract of the base class.
If behavior differs significantly, consider composition over inheritance.
Goal: Reliable and interchangeable polymorphism.

Eg :

Violating :

class Bird {
    void fly() {}
}

class Ostrich extends Bird {
    void fly() { throw new UnsupportedOperationException(); }
}

Better Design :

interface Flyable { void fly(); }

class Sparrow implements Flyable {
    public void fly() { System.out.println("Flying"); }
}


üîπ I ‚Äî Interface Segregation Principle (ISP)
Clients should not be forced to implement methods they don‚Äôt use.
Large interfaces lead to implementation clutter and tight coupling.
Split fat interfaces into smaller, role-specific ones.
This helps classes remain lightweight, focused, and easy to evolve.
E.g., separate Printer, Scanner, and Fax instead of a single IMultiFunctionMachine.
Result: Decoupled and flexible code structure.

Violation :

interface Machine {
    void print();
    void scan();
    void fax();
}

class OldPrinter implements Machine {
    public void print() {}
    public void scan() { throw new UnsupportedOperationException(); }
    public void fax() { throw new UnsupportedOperationException(); }
}

Better design :

interface Printer { void print(); }

class BasicPrinter implements Printer {
    public void print() { System.out.println("Printing..."); }
}


üîπ D ‚Äî Dependency Inversion Principle (DIP)
High-level modules should not depend on low-level modules. Both should depend on abstractions.
Directly using concrete classes ties code tightly and makes it fragile.
Use interfaces or abstract classes, and inject dependencies (e.g., via constructors).
This allows easier testing (mocking) and plug-and-play components.
E.g., a Switch should depend on Switchable, not LightBulb.
Outcome: Decoupled, testable, and scalable architecture.

Eg : Switch depends on abstraction (Switchable), not concrete LightBulbSwitch.

interface Switchable {
    void turnOn();
    void turnOff();
}

class LightBulbSwitch implements Switchable {
    public void turnOn() { System.out.println("Bulb On"); }
    public void turnOff() { System.out.println("Bulb Off"); }
}

class Switch {
    private final Switchable device;
    public Switch(Switchable device) { this.device = device; }
    public void operate() { device.turnOn(); }
}


‚úÖ Quick Reference Table


| Principle | Summary                                                        |
| --------- | -------------------------------------------------------------- |
|     SRP   | One class, one job ‚Äì improves cohesion and maintainability.    |
|     OCP   | Extend behavior without changing existing code.                |
|     LSP   | Subclasses should behave as expected when used via base class. |
|     ISP   | Prefer multiple small interfaces over one large one.           |
|     DIP   | Depend on abstractions, not concrete implementations.          |
